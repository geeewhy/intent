"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratedSystemCommandConditions = exports.autoRegisteredCommandAccessConditions = exports.systemCommandAccessModel = exports.SystemAccessCustomConditions = void 0;
//src/core/system/command-access.ts
const policy_registry_1 = require("../policy-registry");
// manual semantic conditions
var SystemAccessCustomConditions;
(function (SystemAccessCustomConditions) {
    SystemAccessCustomConditions["CAN_TRIGGER_FAILURE"] = "system.canTriggerFailure";
    SystemAccessCustomConditions["CAN_EMIT_EVENTS"] = "system.canEmitEvents";
    SystemAccessCustomConditions["CAN_EXECUTE_TEST"] = "system.canExecuteTest";
})(SystemAccessCustomConditions || (exports.SystemAccessCustomConditions = SystemAccessCustomConditions = {}));
(0, policy_registry_1.registerCondition)(SystemAccessCustomConditions.CAN_TRIGGER_FAILURE, ({ role }) => role === 'system');
(0, policy_registry_1.registerCondition)(SystemAccessCustomConditions.CAN_EMIT_EVENTS, ({ role }) => ['tester', 'developer', 'system'].includes(role));
(0, policy_registry_1.registerCondition)(SystemAccessCustomConditions.CAN_EXECUTE_TEST, ({ role }) => ['tester', 'developer', 'system'].includes(role));
// auto generated scope-based conditions
exports.systemCommandAccessModel = {
    tester: ['logMessage', 'emitMultipleEvents', 'executeTest'],
    system: ['simulateFailure', 'executeRetryableTest'],
    developer: ['logMessage', 'emitMultipleEvents', 'executeTest', 'executeRetryableTest'],
};
// Registers conditions like `system.canExecute.executeTest`
exports.autoRegisteredCommandAccessConditions = (0, policy_registry_1.registerCommandConditionsFromModel)('system', exports.systemCommandAccessModel);
// autogenerated union of scope-based conditions, its runtime type but useful for type safety if when prebuilds are a thing
const allCommands = Array.from(new Set(Object.values(exports.systemCommandAccessModel).flat()));
exports.GeneratedSystemCommandConditions = Object.fromEntries(allCommands.map((cmd) => [cmd.toUpperCase(), `system.canExecute.${cmd}`]));
//# sourceMappingURL=command-access.js.map