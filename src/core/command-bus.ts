//src/core/command-bus.ts
/**
 * Command bus and command handler interfaces
 */

import { Command, Event } from './contracts';
import {BaseAggregate} from "./base/aggregate";

/**
 * Command handler interface
 * Each domain service implements this interface to handle specific command types
 */
export interface CommandHandler<C extends Command = Command> {
  /**
   * Check if this handler supports the given command
   * @param cmd The command to check
   * @returns True if this handler supports the command, false otherwise
   */
  supportsCommand(cmd: Command): boolean;

    /**
     * Handle the command with an aggregate
     * @param cmd The command to handle
     * @param aggregate The aggregate to use for handling the command
     * @returns The events generated by handling the command
     */
  handleWithAggregate(cmd: C, aggregate: BaseAggregate<any>): Promise<Event[]>;
}

/**
 * Command bus
 * Routes commands to the appropriate handler
 */
export class CommandBus {
  private handlers: CommandHandler[] = [];

  /**
   * Register a command handler
   * @param handler The command handler to register
   */
  register(handler: CommandHandler): void {
    console.log('[Command-bus] Registering handler', handler);
    this.handlers.push(handler);
  }

  /**
   * Dispatch a command with an aggregate
   * @param cmd
   * @param aggregate
   */
  async dispatchWithAggregate(cmd: Command, aggregate: BaseAggregate<any>): Promise<Event[]> {
    const handler = this.handlers.find(h => h.supportsCommand(cmd));
    if (!handler) throw new Error(`No handler for command: ${cmd.type}`);
    return await handler.handleWithAggregate(cmd, aggregate);
  }
}
